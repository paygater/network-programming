/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package client;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author Admin
 */
public class GUIclient extends javax.swing.JFrame {

    private String nickname;
    private DataInputStream dis;
    private DataOutputStream dos;
    private Socket s;
    boolean isMatch, isAcptFound, inRoom, isWait;
    String res;
    String guestNickname;
    private PrivateKey privateKey;
    private PublicKey publicKey, otherPublicKey; //publicKey for sending, otherPublicKey is received for encrypt
    private String publicKey_String;
    private Cipher encryptCipher, decryptCipher;
    int i = 3;
    int finish = 0;
    Timer t;

    /**
     * Creates new form GUIclient
     */
    public GUIclient(String nickname, Socket s, DataInputStream dis, DataOutputStream dos) {
        this.nickname = nickname;
        // tao key ma hoa
        KeyPair pair = null;
        try {
            KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA");
            generator.initialize(1024);
            pair = generator.generateKeyPair();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        privateKey = pair.getPrivate();
        publicKey = pair.getPublic();

        //converting public key to byte
        byte[] byte_pubkey = publicKey.getEncoded();

        //converting byte to String
        publicKey_String = Base64.getEncoder().encodeToString(byte_pubkey);
        //
        try {
            decryptCipher = Cipher.getInstance("RSA");
            decryptCipher.init(Cipher.DECRYPT_MODE, privateKey);
        } catch (Exception e) {
            System.out.println(e);
        }
        this.s = s;
        this.dis = dis;
        this.dos = dos;
        isMatch = false;
        isAcptFound = false;
        inRoom = false;
        res = "";
        isWait = false;
        guestNickname = "";
        setLayout(null);
        setTitle("Tranh tài kiến thức");
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        initComponents();
        //set username
        lbUser.setText("Xin chào " + nickname + " ,");
        //random img
        ImageIcon img = new ImageIcon("testIQ.png");
        lbImg.setIcon(img);
        btnBack.setVisible(false);
        lbTime.setVisible(false);
        lbThoiGian.setVisible(false);
        lbDiemClient.setVisible(false);
        lbDoiThu.setVisible(false);
        lbDiemDoiThu.setVisible(false);
        btnUserA.setVisible(false);
        btnUserB.setVisible(false);
        btnUserC.setVisible(false);
        btnGuestA.setVisible(false);
        btnGuestB.setVisible(false);
        btnGuestC.setVisible(false);

    }

    public GUIclient() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jLabel1 = new javax.swing.JLabel();
        lbImg = new javax.swing.JLabel();
        btnA = new javax.swing.JButton();
        btnB = new javax.swing.JButton();
        btnC = new javax.swing.JButton();
        lbUser = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        lbThoiGian = new javax.swing.JLabel();
        lbTime = new javax.swing.JLabel();
        lbDiemClient = new javax.swing.JLabel();
        lbDoiThu = new javax.swing.JLabel();
        lbDiemDoiThu = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ChatFrame = new javax.swing.JTextArea();
        btnGuestA = new javax.swing.JButton();
        btnGuestB = new javax.swing.JButton();
        btnGuestC = new javax.swing.JButton();
        btnUserC = new javax.swing.JButton();
        btnUserA = new javax.swing.JButton();
        btnUserB = new javax.swing.JButton();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("TRANH TAI KIEN THUC");

        lbImg.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lbImg.setText("IMAGE");

        btnA.setText("A");
        btnA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAActionPerformed(evt);
            }
        });

        btnB.setText("B");
        btnB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBActionPerformed(evt);
            }
        });

        btnC.setText("C");
        btnC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCActionPerformed(evt);
            }
        });

        lbUser.setText("Xin chào   ,");

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lbThoiGian.setText("Thời gian");

        lbTime.setText("time");

        lbDiemClient.setText("Điểm: ");

        lbDoiThu.setText("Đối thủ:");

        lbDiemDoiThu.setText("Điểm");

        ChatFrame.setColumns(20);
        ChatFrame.setRows(5);
        jScrollPane1.setViewportView(ChatFrame);

        btnGuestA.setText("Đối thủ");
        btnGuestA.setEnabled(false);

        btnGuestB.setText("Đối thủ");
        btnGuestB.setEnabled(false);

        btnGuestC.setText("Đối thủ");
        btnGuestC.setEnabled(false);

        btnUserC.setText("User");
        btnUserC.setEnabled(false);

        btnUserA.setText("User");
        btnUserA.setEnabled(false);
        btnUserA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUserAActionPerformed(evt);
            }
        });

        btnUserB.setText("User");
        btnUserB.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbDiemClient)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                        .addComponent(lbImg, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(99, 99, 99)
                        .addComponent(lbDiemDoiThu))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbUser)
                        .addGap(171, 171, 171)
                        .addComponent(lbThoiGian)
                        .addGap(18, 18, 18)
                        .addComponent(lbTime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbDoiThu))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack)
                                .addGap(120, 120, 120)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnUserA)
                                    .addComponent(btnUserB)
                                    .addComponent(btnUserC))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnB, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                                    .addComponent(btnA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnGuestA)
                                    .addComponent(btnGuestB)
                                    .addComponent(btnGuestC))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbUser)
                    .addComponent(lbThoiGian)
                    .addComponent(lbTime)
                    .addComponent(lbDoiThu))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbImg, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbDiemDoiThu))
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnA)
                            .addComponent(btnGuestA))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnB)
                            .addComponent(btnGuestB))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnC)
                            .addComponent(btnGuestC)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbDiemClient)
                        .addGap(40, 40, 40)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnUserA)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUserB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUserC)))
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
public void Stop() {
        JOptionPane.showMessageDialog(rootPane, "Đối phương đã thoát ...");
        try {
            TimeUnit.SECONDS.sleep(1);
        } catch (Exception e) {
            System.out.println(e);
        }
        inRoom = false;
        isAcptFound = false;
        isMatch = false;
        isWait = false;
        res = "";
        otherPublicKey = null;
    }

    public void btnSendActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String msg = btnA.getText();
            String guestname = lbDoiThu.getText();
            if (guestname.equals("Đang kết nối ...")) {
                return;
            }
            if (msg.isBlank()) {
                return;
            }
            // encrypt msg and convert to byte
            encryptCipher = Cipher.getInstance("RSA");
            encryptCipher.init(Cipher.ENCRYPT_MODE, otherPublicKey);
            byte[] secretMessageBytes = msg.getBytes(StandardCharsets.UTF_8);
            byte[] encryptedMessageBytes = encryptCipher.doFinal(secretMessageBytes);
            // convert byte to string
            String encodedMessage = Base64.getEncoder().encodeToString(encryptedMessageBytes);
            this.dos.writeUTF("message#" + guestname + "#" + encodedMessage);
            //  chatField.append("Tôi : " + msg + "\n");
            //  chatText.setText("");
        } catch (Exception e) {
            System.out.println(otherPublicKey);
            e.printStackTrace();
        }
    }

    public void Run() {
        Thread receiveCom = new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    while (!isMatch) {
                        try {
                            res = dis.readUTF();
                            if (res.contains("publicKey")) {
                                StringTokenizer str = new StringTokenizer(res, "#");
                                String keyString = "";
                                while (str.hasMoreTokens()) {
                                    keyString = str.nextToken();
                                }
                                byte[] decodedKey = Base64.getDecoder().decode(keyString);
                                X509EncodedKeySpec ks = new X509EncodedKeySpec(decodedKey);
                                KeyFactory kf = KeyFactory.getInstance("RSA");
                                otherPublicKey = kf.generatePublic(ks);
                            }
                            System.out.println("Respond : " + res);
                            switch (res) {
                                case "matched#":
                                    isWait = false;
                                    isAcptFound = true;
                                    isMatch = true;
                                    inRoom = true;
                                    System.out.println(guestNickname);

                                    res = "";
                                    // send publickey
                                    dos.writeUTF("publicKey#" + publicKey_String + "#" + guestNickname);
                                    // Set visible
                                    btnBack.setVisible(true);
                                    lbTime.setVisible(true);
                                    lbThoiGian.setVisible(true);
                                    btnBack.setVisible(false);
                                    lbDiemClient.setVisible(true);
                                    lbDoiThu.setVisible(true);
                                    lbDiemDoiThu.setVisible(true);
                                    lbDoiThu.setText(guestNickname);
                                    //Set text
                                    btnUserA.setText(nickname);
                                    btnUserB.setText(nickname);
                                    btnUserC.setText(nickname);
                                    btnGuestA.setText(guestNickname);
                                    btnGuestB.setText(guestNickname);
                                    btnGuestC.setText(guestNickname);
                                    try {
                                        TimeUnit.SECONDS.sleep(3);
                                    } catch (Exception e) {
                                        System.out.println(e);
                                    }
                                    StartTimer();
                                    break;
                                case "notmatched#":

                                    isWait = false;
                                    isAcptFound = true;
                                    isMatch = false;
                                    inRoom = false;
                                    res = "";
                                    break;
                                case "notfound#":
                                    isAcptFound = true;
                                    isMatch = false;
                                    res = "";
                                    break;
                            }
                        } catch (Exception e) {
                            System.out.println(e);
                        }
                    }
                    while (inRoom) {
                        try {
                            res = dis.readUTF();
                            System.out.println("Respond : " + res);
                            StringTokenizer str = new StringTokenizer(res, "#");
                            String command = str.nextToken();
                            switch (command) {
                                case "outroom":

                                    JOptionPane.showMessageDialog(rootPane, "Đối phương đã thoát ...");
                                    try {
                                        TimeUnit.SECONDS.sleep(1);
                                    } catch (Exception e) {
                                        System.out.println(e);
                                    }
                                    inRoom = false;
                                    isAcptFound = false;
                                    isMatch = false;
                                    isWait = false;
                                    res = "";
                                    otherPublicKey = null;
                                    btnBack.setVisible(false);
                                    lbTime.setVisible(false);
                                    lbThoiGian.setVisible(false);
                                    break;
                                case "message":
                                    String msg = "";
                                    while (str.hasMoreTokens()) {
                                        msg = str.nextToken();
                                    }
                                    // decrypt message

                                    byte[] encryptedMessageBytes = Base64.getDecoder().decode(msg);
                                    byte[] decryptedMessageBytes = decryptCipher.doFinal(encryptedMessageBytes);
                                    String decryptedMessage = new String(decryptedMessageBytes, StandardCharsets.UTF_8);
                                    lbDiemClient.setText(String.valueOf(lbDiemClient.getText() + decryptedMessage));
                                    ChatFrame.append(guestNickname + " : " + decryptedMessage + "\n");
                                    while (lbTime.getText().equals("10") || lbTime.getText().equals("20") || lbTime.getText().equals("30") || lbTime.getText().equals("40") || lbTime.getText().equals("50")) {
                                        if (decryptedMessage.equals("A")) {
                                            btnGuestA.setVisible(true);
                                        }
                                        if (decryptedMessage.equals("B")) {
                                            btnGuestB.setVisible(true);
                                        }
                                        if (decryptedMessage.equals("C")) {
                                            btnGuestC.setVisible(true);
                                        }
                                    }
                                    break;
                                case "publicKey":
                                    String keyString = "";
                                    while (str.hasMoreTokens()) {
                                        keyString = str.nextToken();
                                    }
                                    byte[] decodedKey = Base64.getDecoder().decode(keyString);
                                    X509EncodedKeySpec ks = new X509EncodedKeySpec(decodedKey);
                                    KeyFactory kf = KeyFactory.getInstance("RSA");
                                    otherPublicKey = kf.generatePublic(ks);
                                    break;
                            }
                        } catch (Exception e) {
                            System.out.println(e);
                        }
                    }
                }
            }
        });
        // send thread
        Thread send = new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    try {
                        TimeUnit.SECONDS.sleep(1);
                    } catch (Exception e) {
                        System.out.println(e);
                    }
                    // tim nguoi la
                    while (!isMatch) {
                        try {
                            if (!isWait) {
                                isAcptFound = false;
                                dos.writeUTF("find#");
                            }
                            try {
                                TimeUnit.SECONDS.sleep(1);
                            } catch (Exception e) {
                                System.out.println(e);
                            }
                            while (!isAcptFound) {
                                StringTokenizer str = null;
                                String command = "";
                                if (!res.equals("")) {
                                    str = new StringTokenizer(res, "#");
                                    command = str.nextToken();
                                }
                                switch (command) {
                                    case "found":
                                        isWait = true;
                                        isAcptFound = true;

                                        while (str.hasMoreTokens()) {
                                            guestNickname = str.nextToken();
                                        }
                                        int output = JOptionPane.showConfirmDialog(rootPane,
                                                "Bạn có muốn chơi cùng với " + guestNickname + " ?", "Tìm thấy người lạ",
                                                JOptionPane.YES_NO_OPTION,
                                                JOptionPane.QUESTION_MESSAGE);
                                        if (output == JOptionPane.YES_OPTION) {
                                            dos.writeUTF("accept#" + guestNickname);
                                            if (isMatch) {
                                                isAcptFound = true;
                                                isMatch = true;
                                                inRoom = true;
                                            }

                                        } else if (output == JOptionPane.NO_OPTION) {
                                            isWait = false;
                                            dos.writeUTF("decline#" + guestNickname);
                                            isAcptFound = true;
                                            isMatch = false;
                                        }
                                        res = "";
                                        break;
                                }
                            }
                        } catch (IOException e) {
                            System.out.println(e);
                        }

                    }
                }
            }
        });
        //thread dùng để gửi yêu cầu
        send.start();
        //thread dùng để nhận thông tin
        receiveCom.start();
    }

    public void StartTimer() {

        t = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (lbTime.getText().equals("2") || lbTime.getText().equals("12") || lbTime.getText().equals("24") || lbTime.getText().equals("36") || lbTime.getText().equals("48")) {
                 btnGuestA.setVisible(false);
                 btnGuestB.setVisible(false);
                 btnGuestC.setVisible(false);
                 btnUserA.setVisible(false);
                 btnUserB.setVisible(false);
                 btnUserC.setVisible(false);
            }
                if (finish < 2 && i >= 0) {
                    lbTime.setText(String.valueOf((i)));
                    i--;
                } else {
                    return;
                }
                if (i == 0 && finish == 0) {
                    lbTime.setText(String.valueOf((i)));
                    i = 60;//i = 60
                    finish++;
                }

                if (i == 1 && finish == 0) {
                    lbImg.setText("Go...");
                    lbTime.setText(String.valueOf((i)));
                }

                if ((i == 3 || i == 2) && finish == 0) {
                    lbImg.setText("Ready...");
                    lbTime.setText(String.valueOf((i)));
                }
            }
        });
        t.start();
    }
    private void btnCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCActionPerformed
        try {
            String msg = btnC.getText();
            String answer = "C";
            String guestname = lbDoiThu.getText();
            if (guestname.equals("Đang kết nối ...")) {
                return;
            }
            if (msg.isBlank()) {
                return;
            }
            // encrypt msg and convert to byte
            encryptCipher = Cipher.getInstance("RSA");
            encryptCipher.init(Cipher.ENCRYPT_MODE, otherPublicKey);
            byte[] secretMessageBytes = msg.getBytes(StandardCharsets.UTF_8);
            byte[] encryptedMessageBytes = encryptCipher.doFinal(secretMessageBytes);
            // convert byte to string
            String encodedMessage = Base64.getEncoder().encodeToString(encryptedMessageBytes);
            this.dos.writeUTF("message#" + guestname + "#" + encodedMessage);
            ChatFrame.append("Tôi : " + answer + "\n");
            ChatFrame.append("Tôi : " + msg + "\n");
            while (lbTime.getText().equals("10") || lbTime.getText().equals("20") || lbTime.getText().equals("30") || lbTime.getText().equals("40") || lbTime.getText().equals("50")) {
                if (answer.equals("A")) {
                    btnUserA.setVisible(true);
                }
                if (answer.equals("B")) {
                    btnUserB.setVisible(true);
                }
                if (answer.equals("C")) {
                    btnUserC.setVisible(true);
                }
            }
            //  chatText.setText("");
        } catch (Exception e) {
            System.out.println(otherPublicKey);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnCActionPerformed

    private void btnAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAActionPerformed
        try {
            String msg = btnA.getText();
            String answer = "A";
            String guestname = lbDoiThu.getText();
            if (guestname.equals("Đang kết nối ...")) {
                return;
            }
            if (msg.isBlank()) {
                return;
            }
            // encrypt msg and convert to byte
            encryptCipher = Cipher.getInstance("RSA");
            encryptCipher.init(Cipher.ENCRYPT_MODE, otherPublicKey);
            byte[] secretMessageBytes = msg.getBytes(StandardCharsets.UTF_8);
            byte[] encryptedMessageBytes = encryptCipher.doFinal(secretMessageBytes);
            // convert byte to string
            String encodedMessage = Base64.getEncoder().encodeToString(encryptedMessageBytes);
            this.dos.writeUTF("message#" + guestname + "#" + encodedMessage);
            ChatFrame.append("Tôi : " + answer + "\n");
            ChatFrame.append("Tôi : " + answer + "\n");
            while (lbTime.getText().equals("10") || lbTime.getText().equals("20") || lbTime.getText().equals("30") || lbTime.getText().equals("40") || lbTime.getText().equals("50")) {
                if (answer.equals("A")) {
                    btnGuestA.setVisible(true);
                }
                if (answer.equals("B")) {
                    btnGuestB.setVisible(true);
                }
                if (answer.equals("C")) {
                    btnGuestC.setVisible(true);
                }
            }
            
            //  chatText.setText("");
        } catch (Exception e) {
            System.out.println(otherPublicKey);
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnAActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        int output = JOptionPane.showConfirmDialog(rootPane,
                "Bạn có muốn thoát? " + guestNickname + " ?", "Tìm thấy người lạ",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);
        if (output == JOptionPane.YES_OPTION) {
            try {
                dos.writeUTF("outroom#" + guestNickname);
            } catch (IOException ex) {
                Logger.getLogger(GUIclient.class.getName()).log(Level.SEVERE, null, ex);
            }
            btnBack.setVisible(false);
            lbTime.setVisible(false);
            lbThoiGian.setVisible(false);
            Run();
        }
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBActionPerformed
        try {
            String msg = btnB.getText();
            String answer = "B";
            String guestname = lbDoiThu.getText();
            if (guestname.equals("Đang kết nối ...")) {
                return;
            }
            if (msg.isBlank()) {
                return;
            }
            // encrypt msg and convert to byte
            encryptCipher = Cipher.getInstance("RSA");
            encryptCipher.init(Cipher.ENCRYPT_MODE, otherPublicKey);
            byte[] secretMessageBytes = msg.getBytes(StandardCharsets.UTF_8);
            byte[] encryptedMessageBytes = encryptCipher.doFinal(secretMessageBytes);
            // convert byte to string
            String encodedMessage = Base64.getEncoder().encodeToString(encryptedMessageBytes);
            this.dos.writeUTF("message#" + guestname + "#" + encodedMessage);
            ChatFrame.append("Tôi : " + answer + "\n");
            ChatFrame.append("Tôi : " + msg + "\n");
            while (lbTime.getText().equals("10") || lbTime.getText().equals("20") || lbTime.getText().equals("30") || lbTime.getText().equals("40") || lbTime.getText().equals("50")) {
                if (answer.equals("A")) {
                    btnUserA.setVisible(true);
                }
                if (answer.equals("B")) {
                    btnUserB.setVisible(true);
                }
                if (answer.equals("C")) {
                    btnUserC.setVisible(true);
                }
            }
            // console.setText("");
        } catch (Exception e) {
            System.out.println(otherPublicKey);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnBActionPerformed

    private void btnUserAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUserAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnUserAActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIclient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIclient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIclient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIclient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIclient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea ChatFrame;
    private javax.swing.JButton btnA;
    private javax.swing.JButton btnB;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnC;
    private javax.swing.JButton btnGuestA;
    private javax.swing.JButton btnGuestB;
    private javax.swing.JButton btnGuestC;
    private javax.swing.JButton btnUserA;
    private javax.swing.JButton btnUserB;
    private javax.swing.JButton btnUserC;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbDiemClient;
    private javax.swing.JLabel lbDiemDoiThu;
    private javax.swing.JLabel lbDoiThu;
    private javax.swing.JLabel lbImg;
    private javax.swing.JLabel lbThoiGian;
    private javax.swing.JLabel lbTime;
    private javax.swing.JLabel lbUser;
    // End of variables declaration//GEN-END:variables
}
